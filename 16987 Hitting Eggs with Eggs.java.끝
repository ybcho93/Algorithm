import java.io.*;
import java.util.ArrayList;

public class Main {
    static public class Egg {
        int durability;
        int weight;
    
        public Egg(int durability, int weight) {
            super();
            this.durability = durability;
            this.weight = weight;
        }
        public boolean isBroken() {
            if(durability<=0) return true;
            else return false;
        }
        public int getDurability() {
            return durability;
        }
        public int getWeight(){
            return weight;
        }
        public void setDurability(int durability) {
            this.durability = durability;
        }
        public void hit(Egg a) {
            this.durability = this.durability - a.weight;
            a.durability = a.durability-this.weight;
        }
    }
    public static void main(String[] args) throws IOException{
        int eggCount =0;
        int handIndex =0;
        int result=0;
        ArrayList<Egg> eggArray = new ArrayList<>();

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        eggCount = Integer.parseInt(br.readLine());

        for (int i=0; i<eggCount; i++) {
            String [] input = br.readLine().split(" ");
                   
            int d = Integer.parseInt(input[0]);
            int w = Integer.parseInt(input[1]);

            eggArray.add(new Egg(d, w));
        }

        while(handIndex<eggCount) {
            // 깨진 계란 집지 않았는지 확인해서 깨졌으면 다음 계란
            if(eggArray.get(handIndex).isBroken()) {
                handIndex++;
                continue;
            }
            bw.write(handIndex+": ");

            // 깨지지 않은 것중에 기왕이면 한번에 깰 수 있는 제일 튼튼한 계란 찾기
            int targetNum = 0;
            while(eggArray.get(targetNum).isBroken()) {
                targetNum++;
            }
            // 자기 자신이랑 부딪히게 놔두면 안 됨
            if (targetNum == handIndex) targetNum++;
            // 다 깨지거나 1개밖에 안 남으면 끝남
            if(targetNum >= eggArray.size()) {
                bw.write(result+"\n");
                bw.flush();
                return;
            }
            // 우선순위
            // 1. 깰 수 있고 튼튼한거
            // 2. 깰 수 있고 약한거
            // 3. 깰 수 없고 약한거
            // 4. 깰 수 없고 튼튼한거
            int targetDurability= eggArray.get(targetNum).getDurability();
            for (int i=targetNum; i< eggArray.size(); i++) {
                // 현재 타겟은 깰 수 있음
                if (targetDurability < eggArray.get(handIndex).getWeight()) {
                    // 더 튼튼한데 깰수 있는것은 더 좋은 타겟이 됨. 타겟 교체
                    if (eggArray.get(i).getDurability() < eggArray.get(handIndex).getWeight() && eggArray.get(i).getDurability() >targetDurability && eggArray.get(i).isBroken() == false) {
                        targetNum = i;
                        targetDurability = eggArray.get(i).getDurability();
                    } // 더 약하고 깰수있는것 skip, 깰수 없는 것 skip, 이미 깨진 것 skip
                }
                // 현재 타겟이 깰 수 없을 때 
                else if (targetDurability > eggArray.get(handIndex).getWeight()) {
                    // 깰 수 있는, 아직 안 깨진 게 나왔으면 바로 교체
                    if(eggArray.get(i).getDurability() < eggArray.get(handIndex).getWeight() && eggArray.get(i).isBroken() == false) {
                        targetNum = i;
                        targetDurability = eggArray.get(i).getDurability();
                    } 
                    // 근데 어차피 깰 수가 없으면? 더 약한로 교체
                    else if(eggArray.get(i).getDurability() > eggArray.get(handIndex).getWeight() && eggArray.get(i).getDurability() < targetDurability && eggArray.get(i).isBroken() == false) {
                        targetNum = i;
                        targetDurability = eggArray.get(i).getDurability();
                    } 
                }
            }

            // 손에 있는거랑 타겟을 부딪힘
            eggArray.get(handIndex).hit(eggArray.get(targetNum));

            // 손에 들었던거랑 타겟이 깨졌는지 체크
            if(eggArray.get(targetNum).isBroken()) {
                bw.write(targetNum+"th broken by " +handIndex+ "\n" );
                result++;
            }            
            if (eggArray.get(handIndex).isBroken() == true) {
                bw.write(handIndex+"th hand broken by "+targetNum+"\n");
                result++;
            }
            
            handIndex++;  

            
        }
    
        bw.write(result+"\n");
        bw.flush();
        bw.close();

        return;
    }
    
}

// 제일 가벼운거부터 때리면 안좋은듯. 내가 깰수있는것 중 가장 튼튼한거 깨야할 듯

/* 망함. 계란 안깨지면 깨질때까지 계속 내리치니까 결국 0~1개빼곤 다 깨짐 진짜 빠간가 ㄹㅇㅋㅋ 
import java.io.*;
import java.util.ArrayList;

public class Main {
    static public class Egg {
        int durability;
        int weight;
    
        public Egg(int durability, int weight) {
            super();
            this.durability = durability;
            this.weight = weight;
        }
        public boolean isBroken() {
            if(durability<=0) return true;
            else return false;
        }
        public int getDurability() {
            return durability;
        }
        public int getWeight(){
            return weight;
        }
        public void setDurability(int durability) {
            this.durability = durability;
        }
        public void hit(Egg a) {
            this.durability = this.durability - a.weight;
            a.durability = a.durability-this.weight;
        }
    }
    public static void main(String[] args) throws IOException{
        int eggCount =0;
        int handIndex =0;
        int result=0;
        ArrayList<Egg> eggArray = new ArrayList<>();

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        eggCount = Integer.parseInt(br.readLine());

        for (int i=0; i<eggCount; i++) {
            String [] input = br.readLine().split(" ");
                   
            int d = Integer.parseInt(input[0]);
            int w = Integer.parseInt(input[1]);

            eggArray.add(new Egg(d, w));
        }

        // 반복할 때 마지막 계란으로는 할게 없음. 마지막의 전 계란까지
        while(handIndex<eggCount-1) {
            // 깨진 계란 집지 않았는지 확인해서 깨졌으면 다음 계란
            if(eggArray.get(handIndex).isBroken()) {
                handIndex++;
                continue;
            }
            bw.write(handIndex+": ");

            // 깨지지 않은 제일 가벼운 계란 찾기
            int lightestNum = handIndex+1;
            while(eggArray.get(lightestNum).isBroken()) {
                lightestNum++;
                if(lightestNum >= eggArray.size()) {
                    bw.write(result+"\n");
                    bw.flush();
                    return;
                }
            }
            int lightest= eggArray.get(lightestNum).getWeight();
            for (int i=lightestNum; i< eggArray.size(); i++) {
                if (lightest > eggArray.get(i).getWeight() && eggArray.get(i).isBroken() == false){
                    lightest = eggArray.get(i).getWeight();
                    lightestNum = i;
                }
            }

            //손에 있는거랑 제일 가벼운거를 둘 중 하나 깨질때까지 부딪힘
            while(eggArray.get(handIndex).isBroken() == false && eggArray.get(lightestNum).isBroken() == false ){
                eggArray.get(handIndex).hit(eggArray.get(lightestNum));
            }

            if(eggArray.get(lightestNum).isBroken()) {
                bw.write(lightestNum+"th broken by " +handIndex+ "\n" );
                result++;
            }            

            // 손에 들었던거 깨졌으면 다음 계란 집고 안 깨졌으면 그 계란 그대로 들고 다음 가벼운 계란 찾기로 반복
            if (eggArray.get(handIndex).isBroken() == true) {
                bw.write(handIndex+"th hand broken by "+lightestNum+"\n");
                result++;
                handIndex++;  
            }

            
        }
    
        bw.write(result+"\n");
        bw.flush();
        bw.close();

        return;
    }
    
}
*/